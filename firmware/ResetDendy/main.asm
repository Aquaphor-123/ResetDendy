/*
Всем привет.
Данная программа была написана под микроконтроллер ATTiny10(4, 5, 9).
Программа выполняет сброс Dendy при помощи комбинации кнопок на джойстике.
///////////////////////////////////////////////////////////////////////////////
Программа проверена на приставке с NTSC чипами, с PAL чипами не тестировалась.
Программа для приставок, где сброс осуществляется кнопкой, притягивающей вывод res микросхемы PPU к земле питания. 
///////////////////////////////////////////////////////////////////////////////

Для работы программы необходимо перевести вывод PB3 в режим I/O, для этого нужно запрограммировать Fuse bit RSTDISBL.

Если хотите посмотреть в симуляторе, раскомментируйте строку ниже.
Это ускорит прохождение чтения данных и отключит задержку сброса.
*/
//.equ	SIMULATOR	=	1

// Выбор микроконтроллера:
.equ	ATtiny10	=	1
//.equ	ATtiny9	=	1
//.equ	ATtiny5	=	1
//.equ	ATtiny4	=	1

/*
Назначение выводов микроконтроллера можно переназначить:
1) Сигнал LATCH должен быть подключен к выводу PINB2, так как он используется для выхода микроконтроллера из режима сна по прерыванию.
2) Сигнал RESET возможно переподключить с вывода PINB1 на PINB0. 
3) Сигнал DATA возможно переподключить с вывода PINB0 на PINB1 или PINB3.
4) Сигнал CLOCK возможно переподключить с вывода PINB3 на PINB0.

Для перенезазначения выводов измените значения ниже.
*/

.equ	DATA =	PINB0
.equ	RESET =	PINB1
.equ	LATCH =	PINB2
.equ	CLOCK =	PINB3  

//Маски кнопок джойстика
.equ	RIGHT =	0b11111110
.equ	LEFT =	0b11111101
.equ	DOWN =	0b11111011
.equ	UP =	0b11110111
.equ	START =	0b11101111
.equ	SELECT =	0b11011111
.equ	B =	0b10111111
.equ	A =	0b01111111

.equ	TOTAL_BITS =	8

/*
Ниже задаём комбинацию кнопок джойстика для сброса Dendy (проверено только START & SELEC).
Пример:
1. START & SELEC
2. START & SELEC & B
3. START & SELEC & UP
*/

.set	BUTTON_MASK = START & SELECT

/*
Ниже можно указать желаемое количество считываний комбинации кнопок до перехода к сбросу.
Можно добиться парирования ошибочных нажатий.
*/
.equ	REPEAT = 3	//255 макс

.ifdef	SIMULATOR
.set	BUTTON_MASK = 0xff
.warning "Only for the simulator!" 
.endif

.def	temp	=	r16
.def	dataJoy	=	r17
.def	flag	=	r18
.def	RepCount	=	r19

.CSEG
.org	0x0000
rjmp	init

.org	INT0addr
reti

.org	WDTaddr
ser	flag
reti

.include	"init.inc" 
.include	"delay.inc"
.include	"read.inc"
.include	"reset.inc"	

/*
Основной цикл:
1) Очищаем счётчик повторов комбинации кнопок.
2) Переводим микроконтроллер в режим сна.
3) Выход из режима сна происходит по прерыванию INT0 (по фронту) от сигнала LATCH (после сигнала LATCH есть 6.3 мкс для того, чтобы считать первый бит посылки, но не ранее, чем 250 нс).
4) Запускаем подпрограмму получения данных от джойстика.
5) Сверяем данные с маской. 
	5.1) Если не совпало переходим к шагу 1 (сбрасываем счётчик повторов, потому что не было необходимого количества повторов).
	5.2) Если совпало, увеличиваем количество повторов комбинации кнопок.
6) Проверяем получены ли все повторы комбинации кнопок.
	6.1) Если нет, переходим к шагу 2 (счётчик повторов не сбрасываем, ждём будет ли ещё повтор комбинации кнопок).
	6.2) Если все получены выполняем сброс Dendy.
*/

main:
	clr	RepCount
rep:
	sleep
	
	rcall	readDataJoy

	cpi	dataJoy,	BUTTON_MASK
	brne	main

	inc	RepCount

	cpi	RepCount,	REPEAT
	brne	rep

	cli
	rcall	resetDendy

	rjmp	main
